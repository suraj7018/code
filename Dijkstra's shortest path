#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    // create adj list;
    unordered_map<int, list<pair<int, int>>> adj;
    for(int i=0;i<edges;i++){
        int u = vec[i][0];
        int v = vec[i][1];
        int w = vec[i][2];

        adj[u].push_back(make_pair(v,w));
        adj[v].push_back(make_pair(u,w));
    }

    // distance wala array banao;
    vector<int> dist(vertices);
    for(int i=0;i<vertices;i++){
        dist[i] = INT_MAX;
    }

    set<pair<int, int> > st;
    dist[source] = 0;
    st.insert(make_pair(0, source));

    while(!st.empty()){
        // fetch the top node;
        auto top = *(st.begin());
        int nodedistance = top.first;
        int topnode = top.second;

        st.erase(st.begin());

        // traverse on the neighbour;
        for(auto neighbour : adj[topnode]){
            if(nodedistance+neighbour.second <dist[neighbour.first]){

                auto record = st.find(make_pair(dist[neighbour.first],neighbour.first));

                // if recourd found then erase it;
                if(record!= st.end()){
                    st.erase(record);
                }

                // distance update;
                dist[neighbour.first] = nodedistance+neighbour.second;
                // record push in the set;
                st.insert(make_pair(dist[neighbour.first],neighbour.first));
            }
        }
    }
    return dist;
}
