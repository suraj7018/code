/*************************************************************
    Following is the Binary Serach Tree node structure

    template <typename T>
    class TreeNode
    {
    public :
        T data;
        TreeNode<T> *left;
        TreeNode<T> *right;

        TreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }

        ~TreeNode() {
            if (left)
                delete left;
            if (right)
                delete right;
        }
    };

*************************************************************/

void inorder(TreeNode<int>* root, vector<int> &in){
    if(root == NULL){
        return;
    }
     inorder(root ->left, in);
     in.push_back(root ->data);
     inorder(root ->right, in);
}

TreeNode<int>* inordertobst(int s, int e, vector<int> &in){
    if(s>e)
    return NULL;
        int mid = (s+e)/2;
        TreeNode<int>* node1 = new TreeNode<int>(in[mid]);
        node1 ->left = inordertobst(s, mid-1, in);
        node1 ->right = inordertobst(mid+1, e, in);
        return node1;
    
}

TreeNode<int>* balancedBst(TreeNode<int>* root) {
    vector<int> in;
    // store kara liya
    inorder(root,in);
    return inordertobst(0, in.size()-1, in);
    
}
