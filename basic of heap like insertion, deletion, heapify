#include<bits/stdc++.h>
using namespace std;

class heap{
    public:
    int arr[100];
    int size;

    heap(){
        arr[0] = -1;
        size = 0;
    }

    void insert(int val){
        size = size +1;
        int index = size;
        arr[index] = val;

        while (index>1)
        {
           int parent = index/2;
           if(arr[parent] < arr[index]){
            swap(arr[parent], arr[index]);
            index = parent; 
           }
           else{
            return;
           }
        }              
    }

    void print(){
        for(int i =1;i<=size;i++){
            cout<<arr[i]<<" ";
        }cout<<endl;
    }

    void deletefromheap(){
        if(size ==0){
            cout<<"we have nothing to delete"<<endl;
        }
        arr[1] = arr[size];
        // removeing the last element
        size--;

        // ab sahi jagah par pahuchado;
        int index;
        while (index<size)
        {
            int leftindex = 2*index;
            int rightindex = 2*index+1;

            if(leftindex < size && arr[index] < arr[leftindex] && arr[leftindex]>arr[rightindex]){
                swap(arr[index], arr[leftindex]);
                index = leftindex;
            }
            else if(rightindex < size && arr[index] < arr[rightindex]  && arr[rightindex]>arr[leftindex]){
                swap(arr[index], arr[rightindex]);
                index = rightindex;
            }
            else{
                return;
            }
        }
        
    }
};

void heapify(int arr[], int n, int index){
    int largest = index;
    int left = 2*index;
    int right = 2*index+1;

    if(left<=n && arr[largest]<arr[left]){
        largest = left;
    }

    if(right<=n && arr[largest]<arr[right]){
        largest = right;
    }
    
    if(largest != index){
        swap(arr[largest],arr[index]);
        heapify(arr, n, largest);
    }
}

void heapsort(int arr[], int n){
    int size =n;
    while (size>1)
    {
        // swap karawo
        swap(arr[1],arr[size]);
        size--;
        
        // ab heapify kar do
        heapify(arr, size, 1);

    }
    
}

int main(){
    heap h;
    h.insert(50);
    h.insert(55);
    h.insert(53);
    h.insert(52);
    h.insert(54);
    h.print();
    h.deletefromheap();
    h.print();

    int arr[6]= {-1,54,53,55,52,50};
    int n = 5;
    for(int index =n/2;index>0;index--){
        heapify(arr, n, index);
    }

    cout<<"now printing the array"<<endl;
    for(int index =1;index<=n;index++){
        cout<<arr[index]<<" ";
    }cout<<endl;

    heapsort(arr, n);
    cout<<"now printing the sorted array"<<endl;
    for(int index =1;index<=n;index++){
        cout<<arr[index]<<" ";
    }cout<<endl;

    cout<<"now using the prioroty queue"<<endl;
    // priority_queue always give us max heap; in general
    priority_queue<int> pq;
    pq.push(4);
    pq.push(2);
    pq.push(5);
    pq.push(3);

    cout<<"element at top "<<pq.top()<<endl;
    pq.pop();
    cout<<"element at top "<<pq.top()<<endl;

    // for min heap
    priority_queue<int, vector<int>, greater<int>> minheap;
    minheap.push(4);
    minheap.push(2);
    minheap.push(5);
    minheap.push(3);

    cout<<"element at top "<<minheap.top()<<endl;
    minheap.pop();
    cout<<"element at top "<<minheap.top()<<endl;

    return 0;
}
