#include<bits/stdc++.h>

vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	// create the adj;
	unordered_map<int, list<int>> adj;
	for(int i=0;i<edges.size();i++){
		int u = edges[i].first;
		int v = edges[i].second;
		adj[u].push_back(v);
		adj[v].push_back(u);
	}

	// do bfs;
	unordered_map<int, bool> visited;
	unordered_map<int, int> parents;
	queue<int> q;
	q.push(s);
	parents[s] = -1;
	visited[s] = true;

	while(!q.empty()){
		int front = q.front();
		q.pop();

		for(auto neighbour: adj[front]){
			if(!visited[neighbour]){
				visited[neighbour] = true;
				parents[neighbour] = front;
				q.push(neighbour);
			}
		}
	}

	// prepare a sortest path;
	vector<int> ans;
	int currnode = t;
	ans.push_back(t);

	while(currnode != s){
		currnode = parents[currnode];
		ans.push_back(currnode);
	}
	reverse(ans.begin(), ans.end());

	return ans;
	
}
