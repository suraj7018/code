int solveMem(int n, vector<int> &days, vector<int> &cost, int index,vector<int>&dp){
    if (index >= n){
        return 0;
    }
   if(dp[index]!=-1)
    {
        return dp[index];
    }
    // 1 days pass
    int opt1 = cost[0] + solveMem(n, days, cost, index+1,dp);
  // 7 days pass
    int i;
    for (i=index; i<n && days[i] < days[index]+7; i++);

    int opt2 = cost[1] + solveMem(n, days, cost, i,dp);

    // 30 days pass
    for (i=index; i<n && days[i]<days[index]+30; i++);

    int opt3 = cost[2] + solveMem(n,days, cost, i,dp);

    return dp[index] = min(opt1, min(opt2, opt3));
}
int minimumCoins(int n, vector<int> days, vector<int> cost)
{
   vector<int> dp(n+1, -1);
   return solveMem(n, days, cost,0,dp);
}


//////////////////////////////////////////////////////////////////////////

int minimumCoins(int n, vector<int> days, vector<int> cost)
{
    // space optimization
    int ans = 0;
    queue<pair<int,int>> week;
    queue<pair<int,int>> month;
    for(int day: days){
        while(!week.empty() && week.front().first + 7 <= day){
            week.pop();
        }   
        while(!month.empty() && month.front().first + 30 <= day){
            month.pop();
        }   
        week.push(make_pair(day, ans+cost[1]));
        month.push(make_pair(day, ans+cost[2]));
        ans = min(ans+cost[0], min(month.front().second, week.front().second));
    }
    return ans;
}
