#include <bits/stdc++.h> 

bool issafe(int newx, int newy, vector<vector<bool>> &visited, vector<vector<int>> &arr, int n) {
    if (newx >= 0 && newx < n && newy >= 0 && newy < n && !visited[newx][newy] && arr[newx][newy] == 1) {
        return true;
    } else {
        return false;
    }
}

void solve(int x, int y, vector<vector<int>> &arr, int n, vector<string> &ans, vector<vector<bool>> &visited, string path)
{
    // base case
    if (x == n - 1 && y == n - 1) {
        ans.push_back(path);
        return;
    }

    // Mark the current cell as visited
    visited[x][y] = true;

    // 4 movement D,L,R,U

    // this is for the down;
    if (issafe(x + 1, y, visited, arr, n)) {
        solve(x + 1, y, arr, n, ans, visited, path + 'D');
    }

    // this for the left;
    if (issafe(x, y - 1, visited, arr, n)) {
        solve(x, y - 1, arr, n, ans, visited, path + 'L');
    }

    // this for the right;
    if (issafe(x, y + 1, visited, arr, n)) {
        solve(x, y + 1, arr, n, ans, visited, path + 'R');
    }

    // this for the up;
    if (issafe(x - 1, y, visited, arr, n)) {
        solve(x - 1, y, arr, n, ans, visited, path + 'U');
    }

    // Backtrack: unmark the current cell
    visited[x][y] = false;
}

vector<string> searchMaze(vector<vector<int>> &arr, int n) {
    vector<string> ans;
    vector<vector<bool>> visited(n, vector<bool>(n, false));
    string path = "";
    if (arr[0][0] == 0) {
        return ans;
    }
    solve(0, 0, arr, n, ans, visited, path);
    return ans;
}





///////////////////////////////////////////////////////////////////////////////////////////
using the for loop
#include <bits/stdc++.h>

bool issafe(int newx, int newy, vector<vector<bool>> &visited, vector<vector<int>> &arr, int n) {
    return (newx >= 0 && newx < n && newy >= 0 && newy < n && !visited[newx][newy] && arr[newx][newy] == 1);
}

void solve(int x, int y, vector<vector<int>> &arr, int n, vector<string> &ans, vector<vector<bool>> &visited, string path) {
    // base case
    if (x == n - 1 && y == n - 1) {
        ans.push_back(path);
        return;
    }

    // Define possible movements and their corresponding directions
    vector<int> dx = {1, 0, 0, -1};  
    vector<int> dy = {0, -1, 1, 0};

    // Define movement directions for corresponding characters
    string directions = "DLRU";

    // Mark the current cell as visited
    visited[x][y] = true;

    // Loop through possible movements
    for (int i = 0; i < 4; ++i) {
        int newx = x + dx[i];
        int newy = y + dy[i];

        if (issafe(newx, newy, visited, arr, n)) {
            solve(newx, newy, arr, n, ans, visited, path + directions[i]);
        }
    }

    // Backtrack: unmark the current cell
    visited[x][y] = false;
}

vector<string> searchMaze(vector<vector<int>> &arr, int n) {
    vector<string> ans;
    vector<vector<bool>> visited(n, vector<bool>(n, false));
    string path = "";
    if (arr[0][0] == 0) {
        return ans;
    }
    solve(0, 0, arr, n, ans, visited, path);
    return ans;
}

