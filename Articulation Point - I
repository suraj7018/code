class Solution {
  public:
    void dfs(int index , int parent , vector<int> &disc , vector<int> &low , unordered_map<int,bool> &vis
     , vector<int> adj[] ,  vector<int> &ap , int &timer)
     {
        vis[index] = true;
        disc[index] = low[index] = timer++;
        int child = 0;
        
        for(auto &nbr : adj[index])
        {
            if(nbr == parent)
                continue;
            
            if(!vis[nbr])
            {
                dfs(nbr , index , disc ,low , vis , adj , ap ,timer );
                low[index] = min(low[index] , low[nbr]);
                
                //check articulation point
                if( low[nbr] >= disc[index] && parent != -1 )
                    ap[index] = 1;
                    
                child++;
            }
            else
                low[index] = min(low[index], disc[nbr]);
        }
        if(parent == -1 && child > 1)
            ap[index]=1;
     }
     
     
     
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        int timer = 0;
        vector<int> disc(V,-1);
        vector<int> low(V,-1);
        unordered_map<int,bool> vis;
        vector<int> ap(V,0);
        
        // dfs
        
        for(int i=0;i<V;i++)
        {
            if( !vis[i] )
                dfs(i , -1 , disc , low , vis , adj , ap , timer);
        }
        
        vector<int> res;
        
        for(int i=0 ;i<ap.size();i++ )
        {
            if(ap[i] != 0 )
                res.push_back(i);
        }
        if(res.size() == 0)
             res.push_back(-1);
       
        return res;
    }
};
