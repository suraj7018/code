#include <bits/stdc++.h> 

int solve(vector<int> &weight, vector<int> &value, int index, int capacity, vector<vector<int>> &dp) {
    // Base case;
    if (index == 0) {
        if (weight[0] <= capacity) {
            return value[0];
        } else {
            return 0;
        }
    }

    if (dp[index][capacity] != -1)
        return dp[index][capacity];

    int include = 0;
    if (weight[index] <= capacity) {
        include = value[index] + solve(weight, value, index - 1, capacity - weight[index], dp);
    }
    int exclude = solve(weight, value, index - 1, capacity, dp);

    dp[index][capacity] = max(include, exclude);
    return dp[index][capacity];
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) {
    vector<vector<int>> dp(n, vector<int>(maxWeight + 1, -1));
    return solve(weight, value, n - 1, maxWeight, dp);
}




/////////////////////////////////////////////////////////

#include <bits/stdc++.h> 

int solve(vector<int> &weight, vector<int> &value, int n, int capacity){
	// Step 1: Create the vector dp;
	vector<vector<int>> dp(n+1, vector<int>(capacity+1, -1));

	// Step 2: Analyze the base case;
	for(int w = 0; w <= capacity; w++){
		if(weight[0] <= w){
			dp[0][w] = value[0];
		}
		else{
			dp[0][w] = 0;
		}
	}

	// Take care of the remaining recursive calls;
	for(int index = 1; index < n; index++){
		for(int w = 0; w <= capacity; w++){
			int include = 0;
			if(weight[index] <= w){
				include = value[index] + dp[index-1][w - weight[index]];
			}
			int exclude = dp[index-1][w];

			dp[index][w] = std::max(include, exclude);
		}
	}
	return dp[n-1][capacity];
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) {
    return solve(weight, value, n, maxWeight);
}



/////////////////////////////////////////////

#include <bits/stdc++.h> 

int solve(vector<int> &weight, vector<int> &value, int n, int capacity){
	// Step 1: Create the vector dp;
	vector<int> prev(capacity+1, -1);
	vector<int> curr(capacity+1, -1);

	// Step 2: Analyze the base case;
	for(int w = 0; w <= capacity; w++){
		if(weight[0] <= w){
			prev[w] = value[0];
		}
		else{
			prev[w] = 0;
		}
	}

	// Take care of the remaining recursive calls;
	for(int index = 1; index < n; index++){
		for(int w = 0; w <= capacity; w++){
			int include = 0;
			if(weight[index] <= w){
				include = value[index] + prev[w - weight[index]];
			}
			int exclude = prev[w];

			curr[w] = std::max(include, exclude);
		}
		prev = curr;
	}
	return prev[capacity];
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) {
    return solve(weight, value, n, maxWeight);
}


/////////////////////////////////////
fastest solution

#include <bits/stdc++.h> 

int solve(vector<int> &weight, vector<int> &value, int n, int capacity){
	// Step 1: Create the vector dp;
	vector<int> curr(capacity+1, -1);

	// Step 2: Analyze the base case;
	for(int w = 0; w <= capacity; w++){
		if(weight[0] <= w){
			curr[w] = value[0];
		}
		else{
			curr[w] = 0;
		}
	}

	// Take care of the remaining recursive calls;
	for(int index = 1; index < n; index++){
		for(int w = capacity; w >= 0; w--){
			int include = 0;
			if(weight[index] <= w){
				include = value[index] + curr[w - weight[index]];
			}
			int exclude = curr[w];

			curr[w] = max(include, exclude);
		}
	}
	return curr[capacity];
}

int knapsack(vector<int> weight, vector<int> value, int n, int maxWeight) {
    return solve(weight, value, n, maxWeight);
}
