/*************************************************************

    Following is the Binary Tree node structure:

    class TreeNode{

        public :
            int data;
            TreeNode *left;
            TreeNode *right;

            TreeNode(int data) {
                this -> data = data;
                left = NULL;
                right = NULL;
            }

            ~TreeNode() {
            if (left){
            delete left;
            }

            if (right){
            delete right;
            }
        }
    };

*************************************************************/
void inorderbst(TreeNode<int>* root, vector<int>& in) {
    if (root == NULL) {
        return;
    }
    inorderbst(root->left, in);
    in.push_back(root->data);
    inorderbst(root->right, in);
}

vector<int> mergetworray(const vector<int>& a, const vector<int>& b) {
    //int A = a.size();
    //int B = b.size();
    vector<int> arr3;
    int i = 0;
    int j = 0;
    while (i < a.size() && j < b.size()) {
        if (a[i] > b[j]) {
            arr3.push_back(b[j]);
            j++;
        } else {
            arr3.push_back(a[i]);
            i++;
        }
    }

    while (i < a.size()) {
        arr3.push_back(a[i]);
        i++;
    }

    while (j < b.size()) {
        arr3.push_back(b[j]);
        j++;
    }
    return arr3;
}

// TreeNode<int>* inordertobst(int s, int e, const vector<int>& in) {
//     if (s > e)
//         return NULL;
//     int mid = (s + e) / 2;
//     TreeNode<int>* node1 = new TreeNode<int>(in[mid]);
//     node1->left = inordertobst(s, mid - 1, in);
//     node1->right = inordertobst(mid + 1, e, in);
//     return node1;
// }

vector<int> mergeBST(TreeNode<int>* root1, TreeNode<int>* root2) {
    // store the inorder in array;
    vector<int> bst1, bst2;
    inorderbst(root1, bst1);
    inorderbst(root2, bst2);
    vector<int> arr3 = mergetworray(bst1, bst2);
    return arr3;
}
