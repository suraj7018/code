#include<bits/stdc++.h>
using namespace std;

class Node {

    public:
    int data;
    Node* left;
    Node* right;

    Node(int d){
        this ->data = d;
        this ->left = NULL;
        this ->right = NULL;
    }

};



void levelordertraversal(Node* root){
    queue<Node*> q;
    q.push(root);
    q.push(NULL);

    while(!q.empty()){
        Node* temp = q.front();
        q.pop();

        if(temp != NULL){

            cout<<temp ->data <<" ";
            if(temp ->left){
                q.push(temp ->left);
            }
            
            if(temp ->right){
                q.push(temp ->right);
            }       
        }
        else{
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
    }
}

Node* inserttobst(Node* &root, int d){
    // base case
    if(root ==NULL){
        root = new Node(d);
        return root;
    }

    if(d > root ->data){
        root ->right = inserttobst(root ->right,  d);
    }
    else{
         root ->left = inserttobst(root ->left,  d);
    }
    return root;
}

void takeinput(Node* &root){
    int data;
    cin>>data;
    while(data != -1){
        root = inserttobst(root, data);
        cin>>data;
    }
}


void inordertraversal(Node* root){
    
    // base case
    if(root == NULL){
        return;
    }
    inordertraversal(root ->left);
    cout<< root ->data<<" ";
    inordertraversal(root ->right);
}

void preordertraversal(Node* root){
    
    // base case
    if(root == NULL){
        return;
    }
    cout<< root ->data<<" ";
    preordertraversal(root ->left);
    preordertraversal(root ->right);
}

void postordertraversal(Node* root){
    
    // base case
    if(root == NULL){
        return;
    }
    postordertraversal(root ->left);
    postordertraversal(root ->right);
    cout<< root ->data<<" ";
}

Node* minVal(Node* root){
    Node* temp = root;
    while(temp ->left!=NULL){
        temp = temp ->left;
    }
    return temp;
}

Node* deletefrombst(Node* root, int val){
    // base case
    if(root == NULL){
        return root;
    }
    if(root ->data == val){
        // 0 child
        if(root ->left ==NULL && root ->right == NULL){
            delete root;
            return NULL;
        }

        //1 child
        if(root ->left !=NULL && root ->right == NULL){
            Node* temp = root ->left;
            delete root;
            return temp;
        }

        if(root ->right ==NULL && root ->right != NULL){
            Node* temp = root ->right;
            delete root;
            return temp;
        }

        // 2 child
        if(root ->left !=NULL && root ->right !=NULL){
            int mini = minVal(root ->right) ->data;
            root ->data = mini;
            root ->right = deletefrombst(root ->right, mini);
            return root;
        }
    }
    else if(root ->data > val){
        root ->left = deletefrombst(root ->left, val);
        return root;
    }
    else{
        root ->right = deletefrombst(root ->right, val);
        return root;
    }
}

int main(){
    Node* root = NULL;
    cout<<"enter the data to create the bst"<<endl;
    takeinput(root);
    
    cout<<"printing the bst"<<endl;
    levelordertraversal(root);
    
    cout<<endl<<"printing the inorder"<<endl;
    inordertraversal(root);

    cout<<endl<<"printing the preorder"<<endl;
    preordertraversal(root);

    cout<<endl<<"printing the postorder"<<endl;
    postordertraversal(root);

    root = deletefrombst(root, 5);

    cout<<endl<<"printing the bst"<<endl;
    levelordertraversal(root);
    
    cout<<endl<<"printing the inorder"<<endl;
    inordertraversal(root);

    cout<<endl<<"printing the preorder"<<endl;
    preordertraversal(root);

    cout<<endl<<"printing the postorder"<<endl;
    postordertraversal(root);

    return 0;
}
