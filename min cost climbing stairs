class Solution {
public:
int solve(vector<int>& cost,vector<int> &dp, int n){
    // base case;
    if(n==0)
    return cost[0];
    if(n==1)
    return cost[1];

    if(dp[n]!=-1)
    return dp[n];

    dp[n] = cost[n]+min(solve(cost,dp, n-1), solve(cost,dp, n-2));
    return dp[n];
}
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> dp(n+1,-1);
        int ans = min(solve(cost,dp, n-1), solve(cost,dp, n-2));
        return ans;
    }
};



//////////////////////////////////////////////////////
with space optimisation


class Solution {
public:

    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();

        // step 1 vector creation;
        vector<int> dp(n+1);

        // step 2 initialing
        dp[0] = cost[0];
        dp[1] = cost[1];

        // step 3 traverser for the other;
        for(int i=2;i<n;i++){
            dp[i] = cost[i]+min(dp[i-1],dp[i-2]);
        }
        return min(dp[n-1], dp[n-2]);
    }
};
