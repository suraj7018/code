
#include<bits/stdc++.h>

int getKthLargest(vector<int> &arr, int k)
{
	vector<int> sumstore;
	int n = arr.size();
	for(int i =0;i<n;i++){
		int sum =0;
		for(int j =i;j<n;j++){
            sum = sum + arr[j];
			sumstore.push_back(sum);
		}
	}

	sort(sumstore.begin(),sumstore.end());
	return sumstore[sumstore.size()-k];
}


// new approch using min heap
#include<bits/stdc++.h>
int getKthLargest(vector<int> &arr, int k)
{   
	int n = arr.size();
	priority_queue<int, vector<int>, greater<int> > pq;
	for(int i=0;i<n; i++){
		int sum = 0;
		for(int j=i;j<n;j++){
			sum = sum + arr[j];
			if(pq.size()<k){
				pq.push(sum);
			}
			else{
				if(sum>pq.top()){
					pq.pop();
					pq.push(sum);
				}
			}
		}
	}
	return pq.top();
}
