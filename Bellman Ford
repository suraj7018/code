
   #include<bits/stdc++.h>
   vector<int> bellmonFord(int n, int m, int src, vector<vector<int>> &edges) {
    vector<int> dist(n + 1, 1e8);
    dist[src] = 0;

    // n-1 times traversal
    for (int i = 1; i <= n-1; i++) {
        // Traverse all edges
        for (int j = 0; j < m; j++) {
            int u = edges[j][0];
            int v = edges[j][1];
            int w = edges[j][2];
            if (dist[u] != 1e9 && (dist[u] + w < dist[v])) {
                dist[v] = dist[u] + w;
            }
        }
    }

    // Check for negative cycles
    // bool flag = false;
    // for (int j = 0; j < m; j++) {
    //     int u = edges[j][0];
    //     int v = edges[j][1];
    //     int w = edges[j][2];
    //     if (dist[u] != 1e8 && (dist[u] + w < dist[v])) {
    //         flag = true;
    //         break; // Exit loop early since a negative cycle is found
    //     }
    // }

    // // If a negative cycle exists, return an empty vector
    // if (flag) {
    //     return vector<int>();
    // }

    // Return the array of shortest distances
    return dist;
}
   
