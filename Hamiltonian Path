class Solution
{
    public:
    set<int>st;
    int n=0;
    bool dfs(int node,vector<int> adj[],vector<int> &vis){
        st.insert(node);
        if(st.size()==n)return true;
        
        vis[node] = 1 ;
         for(auto it : adj[node]){
             if(!vis[it]){
                 if(dfs(it,adj,vis)) return true ;
             }
         }
         st.erase(node);
         vis[node]=0;        
         return false ;
    }
    bool check(int N,int M,vector<vector<int>> Edges)
    {   
        n=N;
        vector<int> adj[N+1] ;
        for(auto it : Edges){
            adj[it[0]].push_back(it[1]) ;
            adj[it[1]].push_back(it[0]) ;
        }
        vector<int> vis(N+1,false) ;
        for(int i = 1 ; i <= N ; i++){
            if( dfs(i,adj,vis) ) return true ;
        }
        return false ;
    }
};
