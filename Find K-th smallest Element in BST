#include <bits/stdc++.h> 
/*************************************************************
 
    Following is the Binary Tree node structure

    class BinaryTreeNode 
    {
    public : 
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };

*************************************************************/\

int solve(BinaryTreeNode<int>* root, int &i, int k){
    if(root == NULL){
        return -1;
    }
    int left =  solve(root ->left, i, k);
    if(left !=-1){
        return left;
    }
    i++;
    if(i==k)
        return root ->data;
    return solve(root ->right, i, k);
}

int kthSmallest(BinaryTreeNode<int>* root, int k) {
    int i =0;
    int ans = solve(root, i, k);
    return ans;
}




// using heap


//User function template for C++

class Solution{
    public:
    // arr : given array
    // l : starting index of the array i.e 0
    // r : ending index of the array i.e size-1
    // k : find kth smallest element and return using this function
    int kthSmallest(int arr[], int l, int r, int k) {
       priority_queue<int> pq;
       for(int i =0; i<k;i++){
           pq.push(arr[i]);
       }
       for(int i =k; i<=r; i++){
           if(arr[i]<pq.top()){
               pq.pop();
               pq.push(arr[i]);
           }
       }
       int ans = pq.top();
       return ans;
    }
};
