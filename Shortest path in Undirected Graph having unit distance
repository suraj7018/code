  class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        // code here
        
        //prepare adjList
        unordered_map<int, list<int>> adjList;
        for(int i=0; i<M; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }
        
        vector<int> dist(N, INT_MAX);
        queue<int> q;
        q.push(src);
        dist[src] = 0; //as distance to itself would be 0
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            
            for(auto neighbour: adjList[node]){
                //distance to reach to the node added 1 as to mive to its neighbour < dist[neighbour]
                if(dist[node] + 1 < dist[neighbour]){
                    dist[neighbour] = dist[node] + 1;
                    q.push(neighbour);
                }
            }
        }
        
        //if any elements left over with INT_MAX which means they cant be reached 
        //should be changed to -1
        for(int i=0; i<N; i++){
            if(dist[i] == INT_MAX){
                dist[i] = -1;
            }
        }
        return dist;
    }
};
