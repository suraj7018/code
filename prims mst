#include <bits/stdc++.h> 
vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m, vector<pair<pair<int, int>, int>> &g)
{
      //for given particular node corresponding      //another node with its weight  
      unordered_map<int,list<pair<int,int>>>adj;
      for(int i=0;i<g.size();i++)
       {
         int u = g[i].first.first;
         int v=  g[i].first.second;
         int weight =g[i].second;

        adj[u].push_back(make_pair(v,weight));
         adj[v].push_back(make_pair(u,weight));
        }

//n+1 -> we representing index number as a node

      vector<int>key(n+1);  //weight of node 
      vector<bool> mst(n+1);  //it check given node //is in mst
        vector<int>parent(n+1);

        for(int i=0;i<=n;i++)
         {
              //in starting every value in infinity 
           key[i] =INT_MAX;
           parent[i] = -1;
           mst[i] = false;
          }
       //we mark source node as 0 and parent as -1     //in starting 
          key[1] = 0;
          parent[1] = -1;
      for(int i=1;i<n;i++)
          { 
              //find minimum from key 
           int minimum = INT_MAX;
           int u ;// it we have to find out on that base //we mark mst as true 

          //here we find u 
           for(int v=1;v<=n;v++)
           {
             if(mst[v] ==false && key[v]<minimum )
              {
                u =v;
                  minimum = key[v];
               }
            }
           //mark minimum node as true
              mst[u] =true;
 
            //check u adjacent node 
            for(auto it: adj[u])
             {
              int v = it.first;
              int weight = it.second;
               if(mst[v] ==false && weight < key[v])
                 {
                   parent[v] = u;
                    key[v] = weight;
                     }
               }
          }
      vector<pair<pair<int, int>, int>> result;
       for(int i =2;i<=n;i++)
         {
           result.push_back({{parent[i],i},key[i]});
           }
      return result; 
}
