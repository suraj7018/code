class Solution {
public:
    int solve(int index, int buy, vector<int>& prices, int limits, vector<vector<vector<int>>> &dp){
        // base case
        if(index == prices.size())
        return 0;

        if(limits == 0)
        return 0;

        if(dp[index][buy][limits] != -1)
        return dp[index][buy][limits];

        int profit = 0;
        if(buy){
            profit = max((-prices[index]+solve(index+1, 0, prices, limits, dp)), (0+solve(index+1, 1, prices, limits, dp)));
        }
        else{
            profit = max((prices[index]+solve(index+1,1,prices, limits-1, dp)), (0+solve(index+1, 0, prices, limits, dp)));
        }
        return dp[index][buy][limits] = profit;
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<vector<int>>> dp(n, vector<vector<int>>(2, vector<int>(3, -1)));
        return solve(0, 1, prices, 2, dp);
    }
};

///////////////////////////////////////////////////////////////

class Solution {
public:
    int solvetab(vector<int>& prices){
         int n = prices.size();
        vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));

       for(int index = n-1; index>=0; index--){
           for(int buy = 0; buy<=1; buy++){
               for(int limits = 1; limits<=2; limits++){
                   int profit = 0;
        if(buy){
            profit = max((-prices[index]+dp[index][0][limits]), (0+dp[index+1][1][limits]));
        }
        else{
            profit = max((prices[index]+dp[index+1][1][limits-1]), (0+dp[index+1][0][limits]));
        }
         dp[index][buy][limits] = profit;
               }
           }
       }
       return dp[0][1][2];
    }
    int maxProfit(vector<int>& prices) {
        return solvetab(prices);
    }
};


/////////////////////////////////////////

class Solution {
public:
    int solvetab(vector<int>& prices){
         int n = prices.size();
        // vector<vector<vector<int>>> dp(n+1, vector<vector<int>>(2, vector<int>(3, 0)));
       
       vector<vector<int>> curr(2, vector<int>(3,0));
       vector<vector<int>> next(2, vector<int>(3,0));

       for(int index = n-1; index>=0; index--){
           for(int buy = 0; buy<=1; buy++){
               for(int limits = 1; limits<=2; limits++){
                   int profit = 0;
        if(buy){
            profit = max((-prices[index]+curr[0][limits]), (0+next[1][limits]));
        }
        else{
            profit = max((prices[index]+next[1][limits-1]), (0+next[0][limits]));
        }
         curr[buy][limits] = profit;
               }
           }
           next = curr;
       }
       return next[1][2];
    }
    int maxProfit(vector<int>& prices) {
        return solvetab(prices);
    }
};
