void addSolution(int n, vector<vector<int>>& ans, vector<int>& queensInRows) 
{
    vector<int> currentAnswer;
    for (int i = 0; i < n; i++) 
    {
        for (int j = 0; j < n; j++) 
        {
            if (queensInRows[j] == i) 
            {
                currentAnswer.push_back(1);
            } 
            else 
            {
                currentAnswer.push_back(0);
            }
        }
    }
    ans.push_back(currentAnswer);
}

void nQueensHelper(int col, int n, vector<vector<int>>& ans, vector<int>& queensInRows, vector<int>& queensInDiag1, vector<int>& queensInDiag2) 
{
    // If all the queens have been placed
    if (col == n) 
    {  
        addSolution(n, ans, queensInRows);
        return;
    }

    // Try all the rows for column col
    for (int i = 0; i < n; i++) 
    {                   
        // If its not safe to place queen here              
        if ((queensInRows[i] != -1) || (queensInDiag1[col - i + n - 1] != -1) || (queensInDiag2[col + i] != -1))
        {
            continue;
        }                    

        // Mark queen placed
        queensInRows[i] = queensInDiag1[col - i + n - 1] = queensInDiag2[col + i] = col;    

        // Try placing the remaining queens
        nQueensHelper(col + 1, n, ans, queensInRows, queensInDiag1, queensInDiag2);     

        // Unmark the cell to backtrack
        queensInRows[i] = queensInDiag1[col - i + n - 1] = queensInDiag2[col + i] = -1;  
    }
    return;
}

vector<vector<int>> nQueens(int n)
{
    vector<vector<int>> ans;
    vector<int> queensInRows(n, -1), queensInDiag1(2 * n, -1), queensInDiag2(2 * n, -1);
    nQueensHelper(0, n, ans, queensInRows, queensInDiag1, queensInDiag2);
    return ans;
}







********************************************************************************************
2nd approach
#include <bits/stdc++.h> 

void addSolution ( vector<vector<int> > &ans, vector < vector < int> > &board, int n ){

	vector<int> temp;

	for ( int i = 0; i<n ; i++){
		for ( int j = 0; j<n ; j++){
			temp.push_back(board[i][j]);
		}
	}
	ans.push_back(temp);
} 

bool isSafe ( int row , int col , vector<vector<int> > &board , int n){

	int x = row ;
	int y = col ;

	while ( y>=0){
		if( board [x][y] == 1)
			return false;
		y--;
	}

	x = row ;
	y = col ;
	
	while ( x>= 0 && y>=0){
		if( board [x][y] == 1)
			return false;
	
		y--;
		x--;
	}

	x = row ;
	y = col ;

	while ( x<n && y>=0 ){
		if( board [x][y] == 1)
			return false;
	
		y--;
		x++;
	}

	return true;
}

void solve(int col,vector<vector<int> > &ans,vector<vector<int> > &board , int n){


	if( col == n ){
		addSolution (  ans , board, n);
		return ;
	}

	

	for ( int row = 0 ; row < n ; row++){
		if( isSafe (row , col ,board , n)){
			// place queen if safe
			board[row][col] = 1;
			solve(col+1 , ans , board , n);
			board[row][col] = 0;
		}
	}
}

vector<vector<int>> nQueens(int n)
{
	vector < vector < int> > board (n , vector <int> ( n , 0));
	vector < vector < int> > ans;

	solve( 0 , ans , board , n);
	return ans;
}
